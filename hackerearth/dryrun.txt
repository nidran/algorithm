Cost Matrix =
 100, 20 , 50
 30, 59, 20
 71, 81, 80
 9, 200 , 25

cheapPaintMat
2, 1, 3
3, 1, 2
1, 3, 2
1, 3, 2
 Painted = 0 0 1 0
 K = 2

 M1 - Bottom Up

 addCostMatrix - arr[i][j] - arr staring frm i, having j partitions
 0, 0, 0
 0, 0, 0
 0, 0, 0
 0, 0, 0

 addPaintMatrix - arr[i][j] - paint used fr building i, for partition j
 0, 0, 0
 0, 0, 0
 0, 0, 0
 0, 0, 0

 ITR 1
 if already painted --? no
 if next ele painted --? no - check for (arr[i+1][j]) same partition size
 freely add min of cost[i] as cost
 store minIdx = j
 minSecondIdx = l;
 addCostMatrix - arr[i][j] - arr staring frm i, having j partitions

  0, 0, 0
  0, 0, 0
  0, 0, 0
  9, 0, 0

  minIdx = 1
  minSecondIdx = 3

  addPaintMatrix - arr[i][j] - paint used fr building i, for partition j
  0, 0, 0
  0, 0, 0
  0, 0, 0
  1, 0, 0

  ITR 2
   if already painted --? yes
   if next ele painted --? yes - check for (arr[i+1][j]) same partition size
   // freely add min of cost[i] as cost
   calculate min, second min
   store minIdx = j
   minSecondIdx = l;
   addCostMatrix - arr[i][j] - arr staring frm i, having j partitions

    0, 0, 0
    0, 0, 0
    0, 0, 0
    9, 0, 0

    minIdx = 1
    minSecondIdx = 3

    addPaintMatrix - arr[i][j] - paint used fr building i, for partition j
    0, 0, 0
    0, 0, 0
    0, 0, 0
    1, 0, 0